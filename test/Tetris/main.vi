// Tetris...
//
// Its not the best way to implement such game.
// Purpose is just to have some sort of real illustration of the
// language. A lot of stuff is done just to be done.
//
// NOTE: requires terminal that supports ANSI codes for moving
//       cursor and stuff.
//

enum TetrominoType {
    NONE = -1,
    I,
    O,
    T,
    S,
    Z,
    J,
    L,
    COUNT
}

enum FieldType {
    EMPTY,
    BORDER_X,
    BORDER_Y,
    SHADOW,
    BLOCK,
    COUNT,
}

enum Action {
    NONE,
    EXIT,
    MOVE_LEFT,
    MOVE_RIGHT,
    MOVE_DOWN,
    ROTATE_LEFT,
    ROTATE_RIGHT,
    FLIP,
    DROP,
    SWAP,
    RESTART,
    COUNT,
}

enum ClearType {
    NONE,
    SINGLE,
    DOUBLE,
    TRIPLE,
    TETRIS,
    T_SPIN,
    ALL_CLEAR,
    COUNT
}

enum TSpintType {
    NONE,
    MINI,
    PROPER,
    COUNT
}

enum Orientation {
    DOWN,
    LEFT,
    UP,
    RIGHT,
    COUNT,
}

def Tetromino {
    // coords of top-left corner
    int x = 0;
    int y = 0;

    Orientation orientation;
    TetrominoType type;
}

int[] tetrominos = [
    // I
    0, 0, 0, 0,
    1, 1, 1, 1,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,

    0, 0, 0, 0,
    1, 1, 1, 1,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,

    // O
    0, 0, 0, 0,
    0, 1, 1, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    0, 1, 1, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    0, 1, 1, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    0, 1, 1, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    // T
    0, 1, 0, 0,
    1, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 1, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    1, 1, 1, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    1, 1, 0, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    // S
    0, 1, 1, 0,
    1, 1, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 1, 0,
    0, 0, 1, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    0, 1, 1, 0,
    1, 1, 0, 0,
    0, 0, 0, 0,

    1, 0, 0, 0,
    1, 1, 0, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    // Z
    1, 1, 0, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 0, 1, 0,
    0, 1, 1, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    1, 1, 0, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    1, 1, 0, 0,
    1, 0, 0, 0,
    0, 0, 0, 0,

    // J
    1, 0, 0, 0,
    1, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 1, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    1, 1, 1, 0,
    0, 0, 1, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 0, 0,
    1, 1, 0, 0,
    0, 0, 0, 0,

    // L
    0, 0, 1, 0,
    1, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,

    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 1, 0,
    0, 0, 0, 0,

    0, 0, 0, 0,
    1, 1, 1, 0,
    1, 0, 0, 0,
    0, 0, 0, 0,

    1, 1, 0, 0,
    0, 1, 0, 0,
    0, 1, 0, 0,
    0, 0, 0, 0
];

int[] rotationOffsets = [
     0,  0,   0,  0,   0,  0,   0,  0,   0,  0,
     0,  0,  +1,  0,  +1, -1,   0, +2,  +1, +2,
     0,  0,   0,  0,   0,  0,   0,  0,   0,  0,
     0,  0,  -1,  0,  -1, -1,   0, +2,  -1, +2
];

int[] iRotationOffsets = [
     0,  0,  -1,  0,  +2,  0,  -1,  0,  +2,  0,
    -1,  0,   0,  0,   0,  0,   0, +1,   0, -2,
    -1, +1,  +1, +1,  -2, +1,  +1,  0,  -2,  0,
     0, +1,   0, +1,   0, +1,   0, -1,   0, +2
];

enum KickTest {
    NONE = -1,
    A,
    B,
    C,
    D,
    E,
    COUNT
}

embed int MAX_TETROMINO_WIDTH = 4;
embed int MAX_TETROMINO_HEIGHT = 4;

embed int KC_SPECIAL_KEY	= 224;
embed int KC_CTRL_C		    = 3;
embed int KC_ARROW_UP		= 72;
embed int KC_ARROW_DOWN		= 80;
embed int KC_ARROW_LEFT		= 75;
embed int KC_ARROW_RIGHT	= 77;
embed int KC_A			= 97;
embed int KC_S			= 115;
embed int KC_D			= 100;
embed int KC_W          = 119;
embed int KC_R          = 114;
embed int KC_SPACE      = 32;

embed int TICK_RATE = 32;
embed f64 TICK_DURATION = 1.0 / TICK_RATE;

// in ticks
embed int ACTION_DURATION = TICK_RATE / 32;
int[Action.COUNT] requestedActions = false;

// in ticks
embed int SLIDE_DURATION = TICK_RATE;

// in ticks
embed int DEFAULT_FALL_SPEED = TICK_RATE;
embed f64 FALL_SPEED_DECAY = 0.85;

embed int BOARD_OFFSET_Y = 1;
embed int BOARD_OFFSET_X = 1;

embed int WIDTH = 10;
embed int HEIGHT = 20;

int[(WIDTH + 2) * (HEIGHT + 2)] board = FieldType.EMPTY;

Tetromino tetrominoTemplate;
Tetromino^ currentTetromino = null;
TetrominoType holdTetromino = TetrominoType.NONE;

int queueIdx = 0;
TetrominoType[2 * TetrominoType.COUNT] queue;



// render stuff
embed int RENDER_UI_WIDTH = 7;
u8[] UI_SWAP_STRING = "SWAP";
u8[] UI_QUEUE_STRING = "NEXT";

u8[] GAME_OVER_STRING = "GAME  OVER";

u8[] CLEAR_STRING = "CLEARS";
u8[] SINGLE_STRING = "SINGLE";
u8[] DOUBLE_STRING = "DOUBLE";
u8[] TRIPLE_STRING = "TRIPLE";
u8[] TETRIS_STRING = "TETRIS";
u8[] T_SPIN_STRING = "T-SPIN";
u8[] FALLBACK_STRING = "ERROR";

embed int RENDER_WIDTH  = WIDTH + 2 + RENDER_UI_WIDTH;
embed int RENDER_HEIGHT = HEIGHT + 2;

embed int RENDER_LINE_SIZE = RENDER_WIDTH * Fragment;

u8[] COLOR_I = "\x1b[36m";
u8[] COLOR_O = "\x1b[33m";
u8[] COLOR_T = "\x1b[35m";
u8[] COLOR_S = "\x1b[32m";
u8[] COLOR_Z = "\x1b[31m";
u8[] COLOR_J = "\x1b[34m";
u8[] COLOR_L = "\x1b[91m";
u8[] COLOR_FG = "\x1b[37m";
u8[] COLOR_BG = "\x1b[30m";
u8[] COLOR_SHADOW = "\x1b[90m";
u8[] EPIC = "\x1b[36m";
u8[] MYTHIC = "\x1b[35m";
u8[] LEGENDARY = "\x1b[33m";
u8[] GODLIKE = "\x1b[31m";

def Fragment {
    u8[5] color;
    u8 leftBorder;
    u8 value;
    u8 rightBorder;
}

Fragment[RENDER_WIDTH * RENDER_HEIGHT] renderBuffer;



int ticksFromLastAction = 2 * ACTION_DURATION;
int ticksFromLastFall = 0;
int ticksFromSlideStart = 0;
int clearTicks = 0;

int level = 0;
int score = 0;

int linesCleared = 0;
int fallSpeed = DEFAULT_FALL_SPEED;

ClearType lastClearType = ClearType.NONE;
ClearType lastClearPoints = 0;

KickTest lastKickTest = KickTest.NONE;



{
    clrscr();
    hideCursor();
    flushInputBuffer();
    reset(board, WIDTH);

    f64 lastTime = getTime();
    f64 elapsedTime = 0;
    
    int prevX;
    int prevY;
    int prevOrientation;

    int swapAvaliable = true;
    int hardDropY = 0;

    int gameOver = false;
    int gameOverTicks = 0;

    while true {

        f64 currentTime = getTime();
        elapsedTime = elapsedTime + (currentTime - lastTime);
        lastTime = currentTime;
        
        if elapsedTime < TICK_DURATION : continue;
        elapsedTime = 0;

        // just to prevent overflow
        if ticksFromLastAction <= 2 * ACTION_DURATION {
            ticksFromLastAction = ticksFromLastAction + 1;
        }

        if !currentTetromino {
            spawnRandomTetromino();
            swapAvaliable = true;
            if checkCollision(board, currentTetromino) {
                gameOver = true;
            }
        }

        hardDropY = calculateHardDropY();

        gotoxy(0, 0);
        render(board);
        renderShadow(currentTetromino, hardDropY);
        render(currentTetromino);
        renderUI();
        
        if gameOver {
            if gameOverTicks < TICK_RATE {
                renderGameOver();
            } else if gameOverTicks > TICK_RATE * 2 {
                gameOverTicks = 0;
            }
            gameOverTicks = gameOverTicks + 1;
        }
        
        if clearTicks > 0 {
            int tmp = ((clearTicks % TICK_RATE) + 1) - (TICK_RATE / 4);
            if tmp >= 0 {
                renderClearAnnouncement(lastClearType, lastClearPoints);
            }
            clearTicks = clearTicks - 1;
        }
        
        flushRender();



        // free fall and slide logic
        if !gameOver && ticksFromLastFall >= fallSpeed {

            prevX = currentTetromino.x;
            prevY = currentTetromino.y;
            prevOrientation = currentTetromino.orientation;

            currentTetromino.y = currentTetromino.y + 1;
            if checkCollision(board, currentTetromino) {

                if ticksFromSlideStart > SLIDE_DURATION {
                    
                    currentTetromino.y--;
                    placeTetromino();                    
                    continue;
                
                } else {

                    ticksFromSlideStart = ticksFromSlideStart + 1;

                    currentTetromino.x = prevX;
                    currentTetromino.y = prevY;
                    currentTetromino.orientation = currentTetromino.orientation;
                
                }
            
            } else {

                ticksFromLastFall = 0;
            
            }
        
        } else {

            ticksFromLastFall = ticksFromLastFall + 1;

        }
        


        // player input

        int actionWasHit = getInput();
        if requestedActions[Action.EXIT] : break;
        
        if gameOver {
            if requestedActions[Action.RESTART] {
                gameOver = false;
                reset(board, WIDTH);
            }
            continue;
        }

        if ticksFromLastAction <= ACTION_DURATION {
            requestedActions = false;
            continue;
        }

        if !actionWasHit || !currentTetromino : continue;
        ticksFromLastAction = 1;

        prevX = currentTetromino.x;
        prevY = currentTetromino.y;
        prevOrientation = currentTetromino.orientation;



        if requestedActions[Action.MOVE_LEFT] {
            currentTetromino.x = currentTetromino.x - 1;
        }

        if requestedActions[Action.MOVE_RIGHT] {
            currentTetromino.x = currentTetromino.x + 1;
        }

        if requestedActions[Action.MOVE_DOWN] {
            currentTetromino.y = currentTetromino.y + 1;
        }
        
        if checkCollision(board, currentTetromino) {
            currentTetromino.x = prevX;
            currentTetromino.y = prevY;
            lastKickTest = KickTest.NONE;
        }

        

        if requestedActions[Action.ROTATE_LEFT] {
            lastKickTest = rotate(1);
        }

        if requestedActions[Action.ROTATE_RIGHT] {
            lastKickTest = rotate(-1);
        }

        if requestedActions[Action.FLIP] {
            lastKickTest = rotate(2);
        }




        if requestedActions[Action.DROP] {
            currentTetromino.y = hardDropY;
            placeTetromino();
        }

        if requestedActions[Action.SWAP] && swapAvaliable {
            if holdTetromino == TetrominoType.NONE {
                holdTetromino = currentTetromino.type;
                spawnRandomTetromino();
            } else {
                TetrominoType tmp = currentTetromino.type;
                spawnTetromino(holdTetromino);
                holdTetromino = tmp;
            }
            swapAvaliable = false;
        }


        requestedActions = false;

    }

    showCursor();
    clrscr();
    exit(0);
}



fcn placeTetromino() {
    
    pushToBoard(currentTetromino);
    
    int tspin = TSpintType.NONE;
    if currentTetromino.type == TetrominoType.T : tspin = checkForTSpin();

    int linesClearedNow = clearLines();
    linesCleared = linesCleared + linesClearedNow;



    if linesClearedNow > 0 {
        
        int points = 0;

        when tspin:
        case TSpintType.NONE {
            
            lastClearType = linesClearedNow;

            when linesClearedNow:
            case 1: points = 100;
            case 2: points = 300;
            case 3: points = 500;
            case 4: points = 800;
        
        } 
        case TSpintType.MINI {
            
            lastClearType = ClearType.T_SPIN;
            points = 100 * (1 << linesClearedNow);

        }
        case TSpintType.PROPER {

            lastClearType = ClearType.T_SPIN;
            points = 400 * (linesClearedNow + 1);

        }

        clearTicks = TICK_RATE * 3;

        lastClearPoints = points * (level + 1);
        score = score + lastClearPoints;
    
    }




    int tmpLevel = level;

    level = linesCleared / 10;
    if level > 9 : level = 9;
    
    if level > tmpLevel {
        fallSpeed = DEFAULT_FALL_SPEED * pow(FALL_SPEED_DECAY, level);
    }

    currentTetromino = null;
    ticksFromLastFall = 0;
    ticksFromSlideStart = 0;

}


fcn checkForTSpin() -> TSpintType {
    
    if lastKickTest == KickTest.NONE : return TSpintType.NONE;
    if lastKickTest == KickTest.E : return TSpintType.PROPER;

    

    int bX = currentTetromino.x + 1;
    int bY = currentTetromino.y + 1;

    int topL = board[(bY + 0) * (WIDTH + 2) + (bX + 0)] != FieldType.EMPTY;
    int topR = board[(bY + 0) * (WIDTH + 2) + (bX + 2)] != FieldType.EMPTY;
    int botL = board[(bY + 2) * (WIDTH + 2) + (bX + 0)] != FieldType.EMPTY;
    int botR = board[(bY + 2) * (WIDTH + 2) + (bX + 2)] != FieldType.EMPTY;

    int cnt = topL + topR + botL + botR;
    if cnt < 3 : return TSpintType.NONE;



    int frontCornersOccupied = false;
    when currentTetromino.orientation:
    case Orientation.DOWN:  frontCornersOccupied = botR && botL;
    case Orientation.UP:    frontCornersOccupied = topR && topL;
    case Orientation.LEFT:  frontCornersOccupied = topL && botL;
    case Orientation.RIGHT: frontCornersOccupied = topR && botR;

    if frontCornersOccupied : return TSpintType.PROPER;
    return TSpintType.MINI;

}

fcn checkCollision(int[const] board, Tetromino^ t) -> int {

    int^ shape = getTetrominoShape(t);

    int x = 0;
    int y = 0;
    for ; x < MAX_TETROMINO_WIDTH; x++ {

        y = 0;
        for ; y < MAX_TETROMINO_HEIGHT; y++ {

            if !shape[y * MAX_TETROMINO_WIDTH + x] : continue;

            const int bField = board[(t.y + 1 + y) * (WIDTH + 2) + t.x + 1 + x];
            if bField != FieldType.EMPTY : return true;
        
        }

    }

    return false;

}

fcn calculateHardDropY() -> int {

    int^ shape = getTetrominoShape(currentTetromino);

    int dropDistance = HEIGHT + 1;
    for int x = 0; x < MAX_TETROMINO_WIDTH; x++ {
        
        int tX = currentTetromino.x + x + 1;
        int tY = -1;
        
        for int y = 0; y < MAX_TETROMINO_HEIGHT; y++ {
            if shape[y * MAX_TETROMINO_WIDTH + x] : tY = y;
        }
        if tY < 0 : continue;

        tY = currentTetromino.y + tY + 1;

        int bY = tY + 1;
        for ; bY < HEIGHT + 1; bY++ {
            FieldType ft = board[bY * (WIDTH + 2) + tX];
            if ft != FieldType.EMPTY : break;
        }

        int dist = bY - tY - 1;
        if dropDistance > dist : dropDistance = dist;

    }
    
    return currentTetromino.y + dropDistance;

}

fcn clearLines() -> int {

    int cnt = 0;
    for int y = 0; y < HEIGHT; y++ {
        
        int isLineFull = 1;
        for int x = 0; x < WIDTH; x++ {
            if board[(y + 1) * (WIDTH + 2) + (x + 1)] == FieldType.EMPTY {
                isLineFull = 0;
            }
        }

        if isLineFull {
            cnt++;
            clearLine(y);
        }

    }

    return cnt;

}

fcn clearLine(int y) {
    
    for int x = 0; x < WIDTH; x++ {
        
        board[(y + 1) * (WIDTH + 2) + (x + 1)] = FieldType.EMPTY;
        
        for int yy = y - 1; yy >= 0; yy-- {
            int val = board[(yy + 1) * (WIDTH + 2) + (x + 1)];
            if val != FieldType.BORDER_X {
                board[(yy + 2) * (WIDTH + 2) + (x + 1)] = val;
            }
        }

    }

}

// + -> clockwise
fcn rotate(int rotation) -> KickTest {

    Orientation old = currentTetromino.orientation;
    Orientation new = old + rotation;

    if new >= Orientation.COUNT : new = 0;
    else if new < 0 : new = Orientation.COUNT -1;
    
    currentTetromino.orientation = new;
    if currentTetromino.type == TetrominoType.O : return KickTest.NONE;

    int oldX = currentTetromino.x;
    int oldY = currentTetromino.y;
    
    embed int OFF_CNT = KickTest.COUNT;

    if currentTetromino.type == TetrominoType.I {

        // offset to comensate that we are using only 4x4 
        // tetromino represenatnion, while true rotation
        // is represented by 5x5
        int offX = 0;
        int offY = 0;
        
        if old == Orientation.UP : offX = 1;
        else if old == Orientation.RIGHT : offY = -1;

        if new == Orientation.UP : offX = -1;
        else if new == Orientation.RIGHT : offY = 1;

        for int i = 0; i < OFF_CNT; i++ {
            
            int oldDX = iRotationOffsets[(2 * OFF_CNT) * old + i * 2 + 0];
            int oldDY = iRotationOffsets[(2 * OFF_CNT) * old + i * 2 + 1];
            int newDX = iRotationOffsets[(2 * OFF_CNT) * new + i * 2 + 0];
            int newDY = iRotationOffsets[(2 * OFF_CNT) * new + i * 2 + 1];

            int dX = offX+ (oldDX - newDX);
            int dY = offY + (oldDY - newDY); 

            currentTetromino.x = oldX + dX;
            currentTetromino.y = oldY - dY;
            if !checkCollision(board, currentTetromino) : return i;
        
        }

    } else {

        for int i = 0; i < OFF_CNT; i++ {
            
            int oldDX = rotationOffsets[(2 * OFF_CNT) * old + i * 2 + 0];
            int oldDY = rotationOffsets[(2 * OFF_CNT) * old + i * 2 + 1];
            int newDX = rotationOffsets[(2 * OFF_CNT) * new + i * 2 + 0];
            int newDY = rotationOffsets[(2 * OFF_CNT) * new + i * 2 + 1];

            int dX = oldDX - newDX;
            int dY = oldDY - newDY; 

            currentTetromino.x = oldX + dX;
            currentTetromino.y = oldY - dY;
            if !checkCollision(board, currentTetromino) : return i;
        
        }

    }

    currentTetromino.x = oldX;
    currentTetromino.y = oldY;
    currentTetromino.orientation = old;
    return KickTest.NONE;

}

fcn reset(int[const] board, int width) {

    int i = 0;
    int idx = -1;

    for ; i < WIDTH + 2; i++ {
        board[i] = FieldType.BORDER_X;
    }

    for ; i < board.length - WIDTH - 2; i++ {
                 
        if (idx < 0) {
            board[i] = FieldType.BORDER_Y;
        } else if (idx < width) {
            board[i] = FieldType.EMPTY;
        } else {
            board[i] = FieldType.BORDER_Y;
            idx = -2;
        }
        idx = idx + 1;
        
    }

    for ; i < board.length; i++ {
        board[i] = FieldType.BORDER_X;
    }

    loop renderBuffer using int i = 0 {
        renderBuffer[i].color = COLOR_FG;
        renderBuffer[i].value = ' ';
        renderBuffer[i].leftBorder = ' ';
        renderBuffer[i].rightBorder = ' ';
        // renderBuffer[i] = { COLOR_FG, ' ', ' ', ' ' }; // TODO
    }

    initQueue();

}


fcn renderUI() {

    int offsetX = WIDTH + 3;
    int offsetY = 0;

    int offsetXSwap = offsetX + 1;
    int offsetYSwap = offsetY + 2;

    int offsetXQueue = offsetX + 1;
    int offsetYQueue = offsetYSwap + MAX_TETROMINO_HEIGHT + 2 + 1;

    int x = 0;
    int y = 0;



    // fill background
    for int x = offsetX; x < RENDER_WIDTH; x++ {
        
        for int y = 0; y < RENDER_HEIGHT; y++ {
            
            int ri = y * RENDER_WIDTH + x;
            
            renderBuffer[ri].color = COLOR_FG;
            renderBuffer[ri].leftBorder = ' ';
            renderBuffer[ri].value = ' ';
            renderBuffer[ri].rightBorder = ' ';
        
        }

    }



    // borders
    renderUIBorder(offsetXSwap - 1, offsetYSwap - 1, MAX_TETROMINO_WIDTH + 2, MAX_TETROMINO_HEIGHT + 2);
    renderUIBorder(offsetXQueue - 1, offsetYQueue - 1, MAX_TETROMINO_WIDTH + 2, MAX_TETROMINO_HEIGHT * 3 + 2);



    // strings
    renderString(UI_SWAP_STRING, offsetX + 1, offsetY);
    renderString(UI_QUEUE_STRING, offsetX + 1, offsetYQueue - 2);



    // swap box
    if holdTetromino != TetrominoType.NONE {
        render(holdTetromino, offsetXSwap, offsetYSwap);
    }
    


    // preview queue
    int idx = queueIdx;
    render(queue[queueIdx], offsetXQueue, offsetYQueue);
    
    idx = (queueIdx + 1) % TetrominoType.COUNT;
    render(queue[idx], offsetXQueue, offsetYQueue + MAX_TETROMINO_HEIGHT);
    
    idx = (queueIdx + 2) % TetrominoType.COUNT;
    render(queue[idx], offsetXQueue, offsetYQueue + MAX_TETROMINO_HEIGHT * 2);

}


fcn renderUIBorder(int x, int y, int width, int height) {

    const u8 xValue = '=';
    const u8 yValue = '|';

    for int i = x + 1; i < x + width; i++ {
       const int ri = y * RENDER_WIDTH + i;
       render(FieldType.BORDER_X, ri);
    }

    for int i = y; i < y + height; i++ {
        const int ri = i * RENDER_WIDTH + x;
        render(FieldType.BORDER_Y, ri); 
    }

    y = y + height - 1;
    for int i = x + 1; i < x + width; i++ {
        const int ri = y * RENDER_WIDTH + i;
        render(FieldType.BORDER_X, ri);
    }

    x = x + width - 1;
    y = y - height + 1;
    for int i = y; i < y + height; i++ {
        const int ri = i * RENDER_WIDTH + x;
        render(FieldType.BORDER_Y, ri);
    }

}

fcn renderString(u8[const] str, int x, int y) {

    loop str using int i = 0 {
        
        const int ri = y * RENDER_WIDTH + x + i;

        renderBuffer[ri].color = COLOR_FG;
        renderBuffer[ri].leftBorder = ' ';
        renderBuffer[ri].value = str[i];
        renderBuffer[ri].rightBorder = ' ';

    }

}

fcn renderString(u8[const] str, int x, int y, u8[const] color) {

    loop str using int i = 0 {
        
        const int ri = y * RENDER_WIDTH + x + i;

        renderBuffer[ri].color = color;
        renderBuffer[ri].leftBorder = ' ';
        renderBuffer[ri].value = str[i];
        renderBuffer[ri].rightBorder = ' ';

    }

}

fcn renderChar(u8 ch, int x, int y) {

    const int ri = y * RENDER_WIDTH + x;

    renderBuffer[ri].color = COLOR_FG;
    renderBuffer[ri].leftBorder = ' ';
    renderBuffer[ri].value = ch;
    renderBuffer[ri].rightBorder = ' ';

}

fcn renderNumber(u32 num, int x, int y) {

    embed int MAX_LEN = 5;

    u8[MAX_LEN] tmp;
    int tmpLen = 0;

    if (num == 0) {
        tmp[0] = '0';
        tmpLen = 1;
    }

    while num > 0 && tmpLen < MAX_LEN {
        tmp[tmpLen] = (num % 10) + '0';
        num = num / 10;
        tmpLen = tmpLen + 1;
    }

    for int i = tmpLen - 1; i >= 0; i-- {
        
        const int ri = y * RENDER_WIDTH + x + tmpLen - i + (MAX_LEN - tmpLen);
        
        renderBuffer[ri].color = COLOR_FG;
        renderBuffer[ri].leftBorder = ' ';
        renderBuffer[ri].value = tmp[i];
        renderBuffer[ri].rightBorder = ' ';
    
    }

}

fcn renderLine(int x, int y, int width, int ch) {
    
    width = x + width;
    for ; x < width; x++ {
        
        const int ri = y * RENDER_WIDTH + x;
        
        renderBuffer[ri].color = COLOR_FG;
        renderBuffer[ri].leftBorder = ' ';
        renderBuffer[ri].value = ch;
        renderBuffer[ri].rightBorder = ' ';

    }

}

fcn renderLine(int x, int y, int width) {
    
    renderLine(x, y, width, '=');

}

fcn renderClearAnnouncement(ClearType type, int points) {

    int y = 3;
    int x = WIDTH + 3;

    renderString(CLEAR_STRING, x, y - 3);
    renderLine(x, y - 2, 6, '=');
    renderLine(x, y - 1, 6, ' ');

    when type:
    case ClearType.SINGLE: renderString(SINGLE_STRING, x, y, EPIC);
    case ClearType.DOUBLE: renderString(DOUBLE_STRING, x, y, MYTHIC);
    case ClearType.TRIPLE: renderString(TRIPLE_STRING, x, y, MYTHIC);
    case ClearType.TETRIS: renderString(TETRIS_STRING, x, y, LEGENDARY);
    case ClearType.T_SPIN: renderString(T_SPIN_STRING, x, y, GODLIKE);
    else: renderString(FALLBACK_STRING, x, y);

    renderLine(x, y + 1, 6, ' ');
    renderChar('+', x, y + 1);
    renderNumber(points, x, y + 1);

    renderLine(x, y + 2, 6, ' ');
    renderLine(x, y + 3, 6, '=');

}

fcn renderGameOver() {

    int y = 10;

    renderLine(1, y - 1, WIDTH);
    renderString(GAME_OVER_STRING, 1, y, GODLIKE);
    renderLine(1, y + 1, WIDTH);

}

fcn render(int[const] board) {

    for int i = 0; i < board.length; i++ {

        int x = i % (WIDTH + 2);
        int y = i / (WIDTH + 2);
        
        if (x == 0 || y == 0 || x == WIDTH + 1 || y == HEIGHT + 1) {
            continue;
        }

        int ri = y * RENDER_WIDTH + x;
        render(board[i], ri);
    
    }
    
    renderUIBorder(0, 0, WIDTH + 2, RENDER_HEIGHT);

}

fcn render(FieldType field, int ri) {

    u8 value;
    u8 lBorder = '[';
    u8 rBorder = ']';
    u8[5] color = COLOR_FG;

    when field:
	case FieldType.EMPTY {
        value = '.';
        lBorder = ' ';
        rBorder = ' ';
    }
    case FieldType.BORDER_X {
        value = '=';
    }
    case FieldType.BORDER_Y {
        value = '|';
    }
    else {
        value = '@';
        lBorder = '[';
        rBorder = ']';
        int tmp = FieldType.BLOCK; // TODO
        tmp = field - tmp;
        when tmp:
        case TetrominoType.NONE {
            value = ' ';
            color = COLOR_SHADOW;
        }
        case TetrominoType.I : color = COLOR_I;
        case TetrominoType.O : color = COLOR_O;
        case TetrominoType.T : color = COLOR_T;
        case TetrominoType.S : color = COLOR_S;
        case TetrominoType.Z : color = COLOR_Z;
        case TetrominoType.L : color = COLOR_L;
        case TetrominoType.J : color = COLOR_J;
    }

    renderBuffer[ri].color = color;
    renderBuffer[ri].leftBorder = lBorder;
    renderBuffer[ri].value = value;
    renderBuffer[ri].rightBorder = rBorder;

}

fcn render(TetrominoType t, int offsetX, int offsetY) {

    renderTetrominoShape(getTetrominoShape(t), t, offsetX, offsetY);

}

fcn render(Tetromino^ t) {

    renderTetrominoShape(getTetrominoShape(t), t.type, t.x + 1, t.y + 1);

}

fcn renderTetrominoShape(int^ shape, TetrominoType t, int offsetX, int offsetY) {

    int x = -1;
    int y = 0;
    for int i = 0; i < MAX_TETROMINO_WIDTH * MAX_TETROMINO_HEIGHT; i++ {

        x = x + 1;
        if x >= MAX_TETROMINO_WIDTH {
            y = y + 1;
            x = 0;
        }

        if !shape[i] : continue;

        int ri = (offsetY + y) * RENDER_WIDTH + offsetX + x;
        render(FieldType.BLOCK + t, ri);
    
    }

}

fcn renderShadow(Tetromino^ t, int y) {
    renderTetrominoShape(getTetrominoShape(t), TetrominoType.NONE, t.x + 1, y + 1);
}

fcn flushRender() {
    
    for int y = 0; y < RENDER_HEIGHT; y++ {
        "%.*s\n" RENDER_LINE_SIZE, renderBuffer + RENDER_WIDTH * y;
    }

    "%.*s" COLOR_BG.length, COLOR_FG;

    "\n  Controls                                Level: %i\n" level;
    "      Move:       <- ->                   Score: %i\n" score;
    "      Rotate:     [up/down arrows]        Lines: %i\n" linesCleared;
    "      Drop:       s\n";
    "      Swap:       a\n";
    "      Hard drop:  [space]\n";
    "      Rotate 180: w\n";
    "      Restart:    r\n";

}


fcn getTetrominoShape(Tetromino^ t) -> int^ {

    const int block = (MAX_TETROMINO_WIDTH * MAX_TETROMINO_HEIGHT);
    const int offset = block * (Orientation.COUNT * t.type + t.orientation);
    return tetrominos + offset;

}

fcn getTetrominoShape(TetrominoType t) -> int^ {

    const int block = (MAX_TETROMINO_WIDTH * MAX_TETROMINO_HEIGHT);
    const int offset = block * (Orientation.COUNT * t);
    return tetrominos + offset;

}

fcn pushToBoard(Tetromino^ t) {

    int^ shape = getTetrominoShape(t);

    const int idx = (t.y + 1) * (WIDTH + 2) + t.x + 1;
    for int i = 0; i < MAX_TETROMINO_WIDTH * MAX_TETROMINO_HEIGHT; i++ {
        
        if !shape[i] : continue;

        const int x = i % MAX_TETROMINO_WIDTH;
        const int y = i / MAX_TETROMINO_WIDTH;
        board[idx + (WIDTH + 2) * y + x] = FieldType.BLOCK + t.type;

    }

}

fcn flushInputBuffer() {

    while(kbhit()) {}

}

fcn getInput() -> int {
    
    int wasAction = false;

    while(kbhit()) {
        
        wasAction = true;
        const int key = getchar();
        
        if key == KC_CTRL_C {
            
            requestedActions[Action.EXIT] = true;
        
        } else if key == KC_SPECIAL_KEY {

            when getchar():
            case KC_ARROW_UP    : requestedActions[Action.ROTATE_LEFT] = true;
            case KC_ARROW_DOWN  : requestedActions[Action.ROTATE_RIGHT] = true;
            case KC_ARROW_LEFT  : requestedActions[Action.MOVE_LEFT] = true;
            case KC_ARROW_RIGHT : requestedActions[Action.MOVE_RIGHT] = true;
            else : wasAction = false;
            
        } else if key == KC_SPACE {

            requestedActions[Action.DROP] = true;
        
        } else if key == KC_W {

            requestedActions[Action.FLIP] = true;

        } else if key == KC_S {
            
            requestedActions[Action.MOVE_DOWN] = true;

        } else if key == KC_A {
           
           requestedActions[Action.SWAP] = true;

        } else if key == KC_R {
            
            requestedActions[Action.RESTART] = true;

        }
    
    }

    return wasAction;

}

fcn spawnRandomTetromino() {

    spawnTetromino(queue[queueIdx]);

    queueIdx = queueIdx + 1;
    if (queueIdx >= 2 * TetrominoType.COUNT) {
        queueIdx = 0;
        shuffle(queue, TetrominoType.COUNT);
    }

}

fcn spawnTetromino(TetrominoType t) {

    tetrominoTemplate = { 
        x: 2, 
        y: 0, 
        orientation: Orientation.DOWN, 
        type: t
    };

    currentTetromino = &tetrominoTemplate;

}

fcn initQueue() {
    
    int i = TetrominoType.COUNT;
    loop queue using i {
        TetrominoType t = i - TetrominoType.COUNT;
        queue[i] = t;
        queue[i - TetrominoType.COUNT] = t;
    }

}

fcn shuffle(TetrominoType^ arr, int n) {
    
    if n < 2 : return;

    for int i = 0; i < n - 1; i++ {
        int j = randn(i, TetrominoType.COUNT - 1);
        int tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
    }

}

fcn clrscr() {
    "\033[2J\033[H";
}

fcn hideCursor() {
    "\033[?25l";
}

fcn showCursor() {
    "\033[?25h";
}

fcn gotoxy(int x, int y) {
    "\033[%i;%iH" x, y;
}



[C] {

	#include <stdio.h>
	#include <stdlib.h>
    #include <math.h>
    #include <time.h>
    #include <conio.h>

}

fcn [C] randn(int lowEdge, int topEdge) -> int {

	if (topEdge <= lowEdge) return lowEdge;
	return lowEdge + rand() % (topEdge - lowEdge);

}

fcn [C] srand() {

	srand(time(NULL));

}

fcn [C] getchar() -> int {

    return getch();

}

fcn [C] kbhit() -> int {
    
    return kbhit();

}

fcn [C] pow(f64 base, f64 exponent) -> f64 {
    
    return pow(base, exponent);

}

fcn [C] getTime() -> f64 {
    
    return (double) clock() / CLOCKS_PER_SEC;

}

fcn [C] exit(int status) {

	exit(status);

}
