grammar MyLanguage;

// --- Parser Rules ---

// Start Rule
program
    : programElement* EOF
    ;

programElement
    : definition
    | statement
    | namespaceDef
    ;



// Statements
statement
    : (expression | statementAssignment | variableDefinition) (SEMI | catchExpression)
    | (printStatement | returnStatement | importStatement | breakStatement | continueStatement)? SEMI
    | scope
    | namespaceDef
    | ifStatement 
    | forStatement 
    | whileStatement
    | loopStatement
    ;

statementAssignment
    : expression EQ rValue
    ;

variableDefinition
    : qualifier* datatype decorator* IDENTIFIER (EQ rValue)?
    ;

rValue
    : allocation
    | expression
    ;

catchExpression
    : KW_CATCH IDENTIFIER (SEMI | scope)
    ;
    
allocation
    : KW_ALLOC allocationDefinition
    ;

allocationDefinition
    : datatype? (LBRACK expression? RBRACK)? (COLON expression)?
    ;

printStatement
    : STRING_LITERAL expression (COMMA expression)*
    ;

returnStatement
    : KW_RETURN expression
    ;

ifStatement
    : KW_IF expression anyScope
      ( KW_ELSE (COLON statement)? )?
    | KW_IF LPAREN expression RPAREN anyScope
      ( KW_ELSE (COLON statement)? )?
    ;
    
whileStatement
    : KW_WHILE expression (scope | COLON statement)
    | KW_WHILE LPAREN expression RPAREN (scope | COLON statement)
    ;

forStatement
    : KW_FOR expression? SEMI expression? SEMI expression? anyScope
    | KW_FOR LPAREN expression? SEMI expression? SEMI expression? RPAREN anyScope
    ;
    
loopStatement
    : KW_LOOP expression KW_USING variableDefinition? expression anyScope
    ;
    
importStatement
    : KW_IMPORT (IDENTIFIER | DOT)+ KW_AS (KW_NAMESPACE | KW_SCOPE | KW_FCN) IDENTIFIER
    ;

breakStatement
    : KW_BREAK
    ;
    
continueStatement
    : KW_CONTINUE
    ;

anyScope
    : (scope | COLON statement)
    ;

range
    : expression? ':' expression?
    ;


datatype
    : qualifiedIdentifier
    | builtinDatatype
    | functionPointer
    ;

builtinDatatype
    : KW_INT | KW_I8 | KW_I16 | KW_I32 | KW_I64 | KW_U8 | KW_U16 | KW_U32 | KW_U64 | KW_F32 | KW_F64 | KW_ERROR
    ;

decorator
    : ( LBRACK ( INTEGER_LITERAL | range | qualifier | KW_AUTON | KW_DYNAMIC )? RBRACK )
    | CARET
    ;

qualifier
    : KW_CONST | KW_EMBED
    ;



// Definitions
definition
    : unionDefinition
    | structDefinition
    | functionDefinition
    | errorDefinition
    ;

unionDefinition
    : KW_DEF KW_UNION IDENTIFIER structUnionBody
    ;

structDefinition
    : KW_DEF KW_STRUCT? IDENTIFIER structUnionBody
    ;

structUnionBody
    : LBRACE (variableDefinition SEMI)* RBRACE
    ;

errorDefinition
    : KW_ERROR IDENTIFIER LBRACE (IDENTIFIER SEMI)* RBRACE
    ;

functionDefinition
    : KW_FCN IDENTIFIER LPAREN paramList? RPAREN usingErrorSet? (ARROW datatype)? scope
    | KW_FCN IDENTIFIER (ARROW datatype)? scope
    ;
    
functionPointer
    : KW_FCN LPAREN (datatype decorator* (COMMA datatype decorator*)*)? ARROW datatype? RPAREN
    ;

usingErrorSet
    : KW_USING qualifiedIdentifier
    ;
    
paramList
    : parameter (COMMA parameter)*
    ;

parameter
    : datatype decorator* IDENTIFIER
    ;



namespaceDef
    : KW_NAMESPACE IDENTIFIER LBRACE (statement | definition | namespaceDef)* RBRACE
    ;

scope
    : LBRACE statement* RBRACE
    ;



// --- Expressions ---

expression
    : assignmentExpression (COMMA assignmentExpression)*
    ;

assignmentExpression
    : conditionalExpression ( assignmentOperator assignmentExpression )?
    ;

assignmentOperator
    : EQ | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | SLASH_ASSIGN | PERCENT_ASSIGN
    | AMP_ASSIGN | CARET_ASSIGN | BAR_ASSIGN | LSHIFT_ASSIGN | RSHIFT_ASSIGN
    ;

conditionalExpression
    : logicalOrExpression (QUESTION expression COLON conditionalExpression)?
    ;

logicalOrExpression
    : logicalAndExpression (OR_OP logicalAndExpression)*
    ;

logicalAndExpression
    : bitwiseOrExpression (AND_OP bitwiseOrExpression)*
    ;

bitwiseOrExpression
    : bitwiseXorExpression (BIT_OR bitwiseXorExpression)*
    ;

bitwiseXorExpression
    : bitwiseAndExpression (CARET bitwiseAndExpression)*
    ;

bitwiseAndExpression
    : equalityExpression (AMP equalityExpression)*
    ;

equalityExpression
    : relationalExpression ( (EQ_OP | NEQ_OP) relationalExpression )*
    ;

relationalExpression
    : shiftExpression ( (LT | GT | LE | GE) shiftExpression )*
    ;

shiftExpression
    : additiveExpression ( (LSHIFT | RSHIFT | CONCAT_OP) additiveExpression )*
    ;

additiveExpression
    : multiplicativeExpression ( (PLUS | MINUS) multiplicativeExpression )*
    ;

multiplicativeExpression
    : unaryExpression ( (STAR | SLASH | PERCENT) unaryExpression )*
    ;

unaryExpression
    : (INC_OP | DEC_OP | PLUS | MINUS | BANG | TILDE | CARET | STAR | AMP) unaryExpression # PrefixUnaryExpr
    | castExpression
    | sizeofExpression
    | postfixExpression
    ;

castExpression
    : LPAREN datatype RPAREN unaryExpression
    ;

sizeofExpression
    : KW_SIZEOF ( postfixExpression | LPAREN datatype RPAREN )
    ;

postfixExpression
    : primaryExpression ( LBRACK (expression | range)? RBRACK
                        | LPAREN argList? RPAREN      
                        | (DOT) IDENTIFIER   
                        | (INC_OP | DEC_OP)           
                        )*
    ;

argList
    : expression (COMMA expression)*
    ;

primaryExpression
    : qualifiedIdentifier
    | literal
    | arrayInitialization
    | typeInitialization
    | LPAREN expression RPAREN
    ;

arrayInitialization
    : LBRACK expression (COMMA expression)* RBRACK
    ;

// { expr1, expr2 } or { key1: val1, key2: val2 }
typeInitialization
    : LBRACE ( typeInitField (COMMA typeInitField)* )? RBRACE
    ;

typeInitField
    : IDENTIFIER COLON expression # KeyValueField
    | expression                  # ValueField
    ;

literal
    : INTEGER_LITERAL
    | FLOAT_LITERAL
    | STRING_LITERAL
    | CHAR_LITERAL
    | internalConstant
    ;

internalConstant
    : KW_TRUE | KW_FALSE | KW_NULL
    ;

qualifiedIdentifier
    : SCOPE_OP? IDENTIFIER (SCOPE_OP IDENTIFIER)*
    ;



// --- Lexer Rules ---

KW_INT      : 'int';
KW_I8       : 'i8';
KW_I16      : 'i16';
KW_I32      : 'i32';
KW_I64      : 'i64';
KW_U8       : 'u8';
KW_U16      : 'u16';
KW_U32      : 'u32';
KW_U64      : 'u64';
KW_F32      : 'f32';
KW_F64      : 'f64';
KW_ALLOC    : 'alloc';
KW_ERROR    : 'error';
KW_CONST    : 'const';
KW_EMBED    : 'embed';
KW_DEF      : 'def';
KW_UNION    : 'union';
KW_STRUCT   : 'struct';
KW_FCN      : 'fcn';
KW_NAMESPACE : 'namespace';
KW_TRUE     : 'true';
KW_FALSE    : 'false';
KW_NULL     : 'null';
KW_SIZEOF   : 'sizeof';
KW_RETURN   : 'return';
KW_AUTON    : 'auton';
KW_DYNAMIC  : 'dynamic';
KW_IF       : 'if';
KW_IMPORT   : 'import';
KW_AS       : 'as';
KW_SCOPE    : 'scope';
KW_FOR      : 'for';
KW_WHILE    : 'while';
KW_BREAK    : 'break';
KW_CONTINUE : 'continue';
KW_LOOP     : 'loop';
KW_USING    : 'using';
KW_CATCH    : 'catch';
KW_ELSE     : 'else';

IDENTIFIER: LETTER (LETTER | DIGIT | '_')*;

FLOAT_LITERAL: ( (DIGIT+ '.' DIGIT*) | ('.' DIGIT+) | (DIGIT+) 'f' );
INTEGER_LITERAL
    : HexLiteral
    | BinaryLiteral
    | OctalLiteral
    | DecimalLiteral
    ;

fragment HexLiteral     : '0' [xX] HEX_DIGIT+ ;
fragment BinaryLiteral  : '0' [bB] BIN_DIGIT+ ;
fragment OctalLiteral   : '0' OCTAL_DIGIT+ ;
fragment DecimalLiteral : [1-9] ( '_'? DIGIT )* | '0' ;

fragment HEX_DIGIT      : [0-9a-fA-F] ;
fragment BIN_DIGIT      : [01] ;
fragment OCTAL_DIGIT    : [0-7] ;

CHAR_LITERAL
    : '\'' (ESCAPE_SEQUENCE | ~["\\\r\n])* '\''
    ;

STRING_LITERAL
    : '"'
      ( ESCAPE_SEQUENCE
      | ~["\\\n]
      )*
      '"'
      'b'?
    ;

fragment ESCAPE_SEQUENCE
    : '\\' ( [btnfr"'\\] | OCTAL_ESCAPE | HEX_ESCAPE )
    ;

fragment OCTAL_ESCAPE
    : [0-7] ([0-7] ([0-7])?)?
    ;

fragment HEX_ESCAPE
    : 'x' HEX_DIGIT+
    ;

// Operators
EQ              : '=';
PLUS_ASSIGN     : '+=';
MINUS_ASSIGN    : '-=';
STAR_ASSIGN     : '*=';
SLASH_ASSIGN    : '/=';
PERCENT_ASSIGN  : '%=';
AMP_ASSIGN      : '&=';
CARET_ASSIGN    : '^=';
BAR_ASSIGN      : '|=';
LSHIFT_ASSIGN   : '<<=';
RSHIFT_ASSIGN   : '>>=';

OR_OP   : '||';
AND_OP  : '&&';
EQ_OP   : '==';
NEQ_OP  : '!=';
LE      : '<=';
GE      : '>=';
LSHIFT : '<<';
RSHIFT : '>>';
INC_OP : '++';
DEC_OP : '--';
ARROW  : '->';
SCOPE_OP    : '::';
CONCAT_OP   : '..';

LT      : '<';
GT      : '>';
PLUS    : '+';
MINUS   : '-';
STAR    : '*';
SLASH   : '/';
PERCENT : '%';
AMP     : '&';
BIT_OR  : '|';
CARET   : '^';
TILDE   : '~';
BANG    : '!';

LPAREN  : '(';
RPAREN  : ')';
LBRACE  : '{';
RBRACE  : '}';
LBRACK  : '[';
RBRACK  : ']';
SEMI    : ';';
COMMA   : ',';
DOT     : '.';
QUESTION: '?';
COLON   : ':';


// Fragments
fragment LETTER: [a-zA-Z];
fragment DIGIT: [0-9];

// Whitespaces
WS: [ \t\r\n]+ -> skip;

// Comments
COMMENT: '//' ~[\r\n]* -> skip;
LINE_COMMENT: '//' ~[\r\n]* -> skip;


//mode COMMENT_MODE;
//COMMENT_START
//    : '/{' -> pushMode(COMMENT_MODE), skip
//    ;

//CM_CLOSE
//    : '/}' -> popMode, skip
//    ;

//CM_OPEN
//    : '/{' -> pushMode(COMMENT_MODE)
//    ;

//CM_OTHER
//    : . -> skip
//    ;